<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JS中的继承]]></title>
    <url>%2F2019%2F06%2F27%2FJS%20%E4%B8%AD%E7%9A%84%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[实现JS中的继承常见的继承方法： 构造函数继承 原型继承 组合继承 利用构造函数继承12345678910111213141516function Parent()&#123; this.like = 'game' this.age = 66&#125;Parent.prototype.say = function()&#123; console.log('parent say')&#125;function Child()&#123; Parent.call(this) this.age = 11&#125;const child = new Child()console.log(child) 缺点: 不能继承父类原型上的属性 利用原型继承1234567891011121314151617function Parent()&#123; this.like = 'game' this.age = 66&#125;Parent.prototype.say = function()&#123; console.log('parent say')&#125;function Child()&#123; this.age = 11&#125;Child.prototype = new Parent()const child = new Child()console.log(child) 缺点: 不能继承父类构造器内的属性 组合式继承12345678910111213141516171819function Parent()&#123; this.like = 'game' this.age = 66 console.log('call parent constructor')&#125;Parent.prototype.say = function()&#123; console.log('parent say')&#125;function Child()&#123; this.age = 11 Parent.call(this)&#125;Child.prototype = new Parent()const child = new Child()console.log(child) 优点: 可以继承到原型和构造器的属性缺点: 调用了两次parent的构造方法 组合式继承优化 11234567891011121314151617181920function Parent()&#123; this.like = 'game' this.age = 66 console.log('call parent constructor')&#125;Parent.prototype.say = function()&#123; console.log('parent say')&#125;function Child()&#123; this.age = 11 Parent.call(this)&#125;Child.prototype = Object.create(Parent.prototype)const child = new Child()console.log(child)console.log(child.constructor) 优点: 修复了上个继承的问题缺点: 打印child的构造器函数发现是parent的构造器 影响对实例类型的判断 组合式继承优化 212345678910111213141516171819202122function Parent()&#123; this.like = 'game' this.age = 66 console.log('call parent constructor')&#125;Parent.prototype.say = function()&#123; console.log('parent say')&#125;function Child()&#123; this.age = 11 Parent.call(this)&#125;Child.prototype = Object.create(Parent.prototype,&#123; constructor: &#123;value: Child&#125;&#125;)const child = new Child()console.log(child)console.log(child.constructor) 完]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>javescript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC 题目 Pig Latin]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20Pig%20Latin%2F</url>
    <content type="text"><![CDATA[要求把指定的字符串翻译成 pig latin。 Pig Latin 把一个英文单词的第一个辅音或辅音丛（consonant cluster）移到词尾，然后加上后缀 “ay”。 如果单词以元音开始，你只需要在词尾添加 “way” 就可以了。 提示12345Array.push() Array.join() String.substr() String.split() Array.splice() 思路第一步： 分割字符串为数组第二步： 判定首字母是是元音字母还是辅音字母，首字母是元音字母直接拼接原字符串 后加“way”第三步： 首字符是辅音音字母计算辅音或辅音从的长度len第四步： 取出辅音从放到数组末尾，删除数组前方辅音从第五步： 将数组拼接为字符串 再跟“ay”拼接 返回最后结果 源代码123456789101112131415161718192021222324252627function translate(str) &#123; var reg=new RegExp(/[aeiouAEIOU]/); var len=0; var arr=str.split("");//分解字符串 var newarr=[]; if(!reg.test(arr[0]))&#123; //for循环计算出元音字母数 for(var i=0;i&lt;arr.length;i++)&#123; if(!reg.test(arr[i]))&#123; len++; &#125; else&#123; break; &#125; &#125; var subStr=str.substr(0,len); //取出要放到后面的子字符串 arr.splice(0,len);//删除辅音字母 arr.push(subStr);//将辅音子字符串放到数组最后面 str=arr.join("")+"ay";//将数组组合成字符串然后拼接 &#125; else&#123; str+="way";//拼接字符串 &#125; console.log(str); return str; &#125;translate("onsonant");]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC 题目 Diff Two Arrays]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20Diff%20Two%20Arrays%2F</url>
    <content type="text"><![CDATA[题目要求比较两个数组，然后返回一个新数组，该数组的元素为两个给定数组中所有独有的数组元素。换言之，返回两个数组的差异。 相关方法Array.indexOf(element) 用来判断Array中有没有elementArray.concat(arr1) 用来合并两个数组 源代码12345678910111213function diff(arr1, arr2) &#123; var newArr = []; var SumArr=arr1.concat(arr2); //将两个数组合并 for(var i=0;i&lt;SumArr.length;i++)&#123; //遍历合并后的数组，与两个数组比较//用indexOf 来判定arr1或arr2中有没有总数组中的元素，即有没有独立元素，若没有则等于-1 if(arr1.indexOf(SumArr[i])==-1||arr2.indexOf(SumArr[i])==-1)&#123; newArr.push(SumArr[i]);//将符合条件的元素push到新数组newArr &#125; &#125; return newArr;&#125;diff([1, 2, 3, 5], [1, 2, 3, 4, 5]);]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC 算法题 Exact Change]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20%20Exact%20Change%2F</url>
    <content type="text"><![CDATA[目标设计一个收银程序 checkCashRegister() ，其把购买价格(price)作为第一个参数 , 付款金额(cash)作为第二个参数, 和收银机中零钱 (cid) 作为第三个参数. cid 是一个二维数组，存着当前可用的找零. 当收银机中的钱不够找零时返回字符串 “Insufficient Funds”. 如果正好则返回字符串 “Closed”. 否则, 返回应找回的零钱列表,且由大到小存在二维数组中. 思路 先计算总剩余钱数totalCash 和 需要找零的钱数change total&lt;change 则return “不够找零” total=change 则 return “正好找零 closed” 可以找零了 从大额钱币开始找 先计算找零change需要当前面值的的最大数量neednum和目前收银机里面剩余钱币的数nownum 比较 当前面值需要的数量neeednum 和当前面值剩余的总数量nownum 两者取最小值 同时推入数组 然后找零减去相应的数额 最后判断 需要的找零change是否等于0 等于零说明找完了 不等于说明零钱不够找不开 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970function checkCashRegister(price, cash, cid) &#123; cash*=100; //将美元转换成美分 都是整数便于计算 最后要转换回来 price*=100; var change=cash-price; //需要的找零 var totalCash=getToalCash(cid); //收银机剩余总钱数 var result=[]; //存放结果数组 console.log(&quot;收银机里面的总钱数： &quot;+totalCash+&quot; 需要的找零： &quot;+change); if(totalCash&lt;change)&#123; //收银机总钱数小于要找零 return &quot;Insufficient Funds&quot;; &#125; else if(totalCash===change)&#123;//收银机总钱数正好等于要找零 return &quot;Closed&quot;; &#125; if(totalCash&gt;change)&#123;//收银机总钱数大于要找零//遍历数组开始找零 for(let i=cid.length-1;i&gt;=0;i--)&#123; //1：获取需要找零的需要当前面额的最大数量 needNum var nowValue=transformCoin(cid[i][0]); //当前面值 var needNum=Math.floor(change/nowValue); console.log(&quot;当前面额： &quot;+transformCoin(cid[i][0])); console.log(&quot;需要当前面额的最大数量 needNum: &quot;+needNum); //2 获取现有的数额最大数量 var nowNum=Math.floor(cid[i][1]*100/nowValue); console.log(&quot;目前收银机里当前面额剩余最大数量nowNum： &quot;+nowNum); //3 取 needNum 和nowNum 的最小值 作为要取得数量finalNum var finalNum=Math.min(nowNum,needNum); console.log(&quot;最终需要的当前面额数目为： &quot;+finalNum); if(finalNum!==0)&#123;//进入需要的面值 对其操作 // console.log([cid[i][0],finalNum*nowValue/100]); result.push([cid[i][0],finalNum*nowValue/100]); change-=finalNum*nowValue; &#125; &#125; //找零结束 判断找零change最后是否为0 if(change==0)&#123; //change 最后为0 说明完成找零 console.log(result); return result; &#125; else&#123;//change 最后不为0 说明零钱不够 无法完成找零 return &quot;Insufficient Funds&quot;; &#125; &#125; function getToalCash(arr)&#123; //获取收银机里面的剩余钱数 传入cid数组 var sum=0; for(let i=0;i&lt;arr.length;i++)&#123; sum+=arr[i][1]*100; &#125; return sum; &#125; function transformCoin(coin)&#123; //转换钱币到美分 switch(coin)&#123; case &apos;PENNY&apos;:return 1; case &apos;NICKEL&apos;:return 5; case &apos;DIME&apos;:return 10; case &apos;QUARTER&apos;:return 25; case &apos;ONE&apos;:return 100; case &apos;FIVE&apos;:return 500; case &apos;TEN&apos;:return 1000; case &apos;TWENTY&apos;:return 2000; case &apos;ONE HUNDRED&apos;:return 10000; &#125; &#125;&#125;]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC 题目 Profile Lookup]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20Profile%20Lookup%20%2F</url>
    <content type="text"><![CDATA[要求：我们有一个对象数组，里面存储着通讯录。 函数 lookUp 有两个预定义参数：firstName值和prop属性 。 函数将会检查通讯录是否存在一个联系人的firstName属性等于firstName值，还会检查对应联系人是否存在 prop属性。 如果它们都存在，函数返回prop属性对应的值。 如果firstName 值不存在，返回 “No such contact”。 如果prop 属性不存在，返回 “No such property”。 实现目标：“Kristian”, “lastName” 应该返回 “Vos”“Sherlock”, “likes” 应该返回 [“Intriguing Cases”, “Violin”]“Harry”,”likes” 应该返回一个数组“Bob”, “number” 应该返回 “No such contact”“Akira”, “address” 应该返回 “No such property” 源代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//Setupvar contacts = [ &#123; &quot;firstName&quot;: &quot;Akira&quot;, &quot;lastName&quot;: &quot;Laine&quot;, &quot;number&quot;: &quot;0543236543&quot;, &quot;likes&quot;: [&quot;Pizza&quot;, &quot;Coding&quot;, &quot;Brownie Points&quot;] &#125;, &#123; &quot;firstName&quot;: &quot;Harry&quot;, &quot;lastName&quot;: &quot;Potter&quot;, &quot;number&quot;: &quot;0994372684&quot;, &quot;likes&quot;: [&quot;Hogwarts&quot;, &quot;Magic&quot;, &quot;Hagrid&quot;] &#125;, &#123; &quot;firstName&quot;: &quot;Sherlock&quot;, &quot;lastName&quot;: &quot;Holmes&quot;, &quot;number&quot;: &quot;0487345643&quot;, &quot;likes&quot;: [&quot;Intriguing Cases&quot;, &quot;Violin&quot;] &#125;, &#123; &quot;firstName&quot;: &quot;Kristian&quot;, &quot;lastName&quot;: &quot;Vos&quot;, &quot;number&quot;: &quot;unknown&quot;, &quot;likes&quot;: [&quot;Javascript&quot;, &quot;Gaming&quot;, &quot;Foxes&quot;] &#125;];function lookUp(firstName, prop)&#123;// Only change code below this line for(var i=0;i&lt;contacts.length;i++) &#123; if(firstName==contacts[i].firstName) &#123; if(contacts[i].hasOwnProperty(prop)) &#123; return contacts[i][prop]; &#125; else &#123; return &quot;No such property&quot;; &#125; &#125; &#125; return &quot;No such contact&quot;;&#125;// Change these values to test your functionlookUp(&quot;Kristian&quot;, &quot;lastName&quot;); 笔记在使用Object.hasOwnProperty（）时 注意括号内的是否加引号，如果是变量名不加 如果只是字符串要加调用 contacts[i][prop]时 第二个括号内如果是变量名不加引号 是字符串时要加]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC 题目 Missing letters]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20Missing%20letters%2F</url>
    <content type="text"><![CDATA[要求从传递进来的字母序列中找到缺失的字母并返回它。 如果所有字母都在序列中，返回 undefined。 提示12String.charCodeAt() String.fromCharCode() 源代码1234567891011121314151617function fearNotLetter(str) &#123; var arr=str.split(&quot;&quot;); var start=str.charCodeAt(0); //字符串起始的unicode编码 var end=str.charCodeAt(str.length-1); //字符串末尾的unicode编码 for(var i=start;i&lt;=end;i++)&#123; //遍历start到end的unicode编码 找出缺失的字母 //判断从start到end的字母是否跟传入的str的每一个字母相等，不相等说明缺失字母 if(String.fromCharCode(i)!==arr[i-start])&#123; console.log(String.fromCharCode(i)); str=String.fromCharCode(i); return str; &#125; &#125; console.log(undefined); return undefined;&#125;fearNotLetter(&quot;abcdf&quot;);]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC题目 Check for Palindromes]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20%20Check%20for%20Palindromes%2F</url>
    <content type="text"><![CDATA[要求如果给定的字符串是回文，返回true，反之，返回false。 如果一个字符串忽略标点符号、大小写和空格，正着读和反着读一模一样，那么这个字符串就是palindrome(回文)。 注意你需要去掉字符串多余的标点符号和空格，然后把字符串转化成小写来验证此字符串是否为回文。 函数参数的值可以为”racecar”，”RaceCar”和”race CAR”。 String.replace()String.toLowerCase() 起初看到这么一个要求 小case吗！！分分钟搞定啊！于是如下代码出现了 1234567891011function palindrome(str)&#123; var arr=str.split(&apos;&apos;);//分割字符串为数组 var newarr=arr.reverse();//将数组反转 //比较数组 for(var i=0;i&lt;arr.length;i++)&#123; if(arr[i]!==newarr[i])&#123; return false; &#125; &#125; return true; &#125; 理所当然 代码GG 于是google之，发现 reverse() 这个方法是在执行后会改变原数组而不是返回一个新数组于是修改代码如下 123456789101112function palindrome(str)&#123; var arr=str.split(&apos;&apos;);//分割字符串为数组 var newarr=str.split(&apos;&apos;);//赋给另一个数组用来保存 arr.reverse();//将数组反转 //比较数组 for(var i=0;i&lt;arr.length;i++)&#123; if(arr2[i]!==newarr[i])&#123; return false; &#125; &#125; return true; &#125; 然后 又GG我又去检查发现题目给的样例里面还有大小写，特殊字符！！！这才想到了题目给的提示repalce() 利用正则替换字符串totoLowerCase() 将字符串转换成小写再次修改代码 12345678910111213141516171819function palindrome(str) &#123; // Good luck! var str1=str.replace(/\W+/g,&quot;&quot;); str1=str1.replace(/\_+/g,&quot;&quot;); str1=str1.toLowerCase(); var arr=str1.split(&apos;&apos;);//定义将字符串打散后的数组 var newarr=str1.split(&apos;&apos;);//将该数组再次保存 后面会调用reverse方法将其改变， arr会发生变化 ，所以将数组另存一份为newarr arr.reverse();//反转数组 //比较数组 for(var i=0;i&lt;arr.length;i++)&#123; if(arr[i]!==newarr[i])&#123; return false; &#125; &#125; return true; &#125; palindrome(&quot;not a palindrome&quot;); Ctrl+Enter 完美！]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC 算法题 Roman Numeral Converter]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20Roman%20Numeral%20Converter%2F</url>
    <content type="text"><![CDATA[要求：将给定的数字转换成罗马数字 用到的方法：Array.join()Array.push() 源代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293function convert(num) &#123;var x;var result=[];//处理千位 if(num&gt;=1000)&#123; x=Math.floor(num/1000) for(var i=0;i&lt;x;i++)&#123; result.push(&quot;M&quot;); &#125; num-=x*1000; &#125;//处理百位if(num&gt;=100)&#123; x=Math.floor(num/100); if(x&gt;=5)&#123; if(x==9)&#123; result.push(&quot;CM&quot;); console.log(x); &#125; else&#123; console.log(&quot;1111111&quot;); result.push(&quot;D&quot;); for(var i=0;i&lt;(x-5);i++)&#123; result.push(&quot;C&quot;); &#125; &#125; &#125; else if(x&lt;4)&#123; for(var i=0;i&lt;x;i++)&#123; result.push(&quot;C&quot;); &#125; &#125; else if(x==4)&#123; result.push(&quot;CD&quot;); &#125; num-=x*100; &#125;//处理十位if(num&gt;=10)&#123; x=Math.floor(num/10) if(x&gt;=5)&#123; if(x==9)&#123; result.push(&quot;XC&quot;); &#125; else&#123; result.push(&quot;L&quot;); for(var i=0;i&lt;(x-5);i++)&#123; result.push(&quot;X&quot;); &#125; &#125; &#125; else if(x&lt;4)&#123; for(var i=0;i&lt;x;i++)&#123; result.push(&quot;X&quot;); &#125; &#125; else if(x==4)&#123; result.push(&quot;XL&quot;); &#125; num-=x*10; &#125;//处理个位if(num&gt;=1)&#123; x=num; if(x&gt;=5)&#123; if(x==9)&#123; result.push(&quot;IX&quot;); &#125; else&#123; result.push(&quot;V&quot;); for(var i=0;i&lt;(x-5);i++)&#123; result.push(&quot;I&quot;); &#125; &#125; &#125; else if(x&lt;4)&#123; for(var i=0;i&lt;x;i++)&#123; result.push(&quot;I&quot;) &#125; &#125; else if(x==4)&#123; result.push(&quot;IV&quot;); &#125; num-=x*10;&#125; console.log(result.join(&quot;&quot;)); return result.join(&quot;&quot;);&#125;convert(1380);]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC 题目 Title Case a Sentence]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20Title%20Case%20a%20Sentence%2F</url>
    <content type="text"><![CDATA[要求确保字符串的每个单词首字母都大写，其余部分小写。 像’the’和’of’这样的连接符同理。 当你完成不了挑战的时候，记得开大招’Read-Search-Ask’。 这是一些对你有帮助的资源: String.split() ###源代码 function titleCase(str){ var arr=str.split(&quot; &quot;);//将传入的字符串分割为数组arr var arr2=[]; var newStr;//定义一个变量用来保存最终的字符串 for(var i=0;i&lt;arr.length;i++){ arr2=arr[i].split(&apos;&apos;);//将arr数组中的每一个元素再次分割为数组arr2 目的是下面找到首字母 arr2[0]=arr2[0].toUpperCase();//将arr2中的第一个字母大写 即arr数组中的每一个元素的首字母大写 for(var j=1;j&lt;arr[i].length;j++){ arr2[j]=arr2[j].toLowerCase();//遍历arr2数组将其除了下标为0的元素全部转换成小写 } arr[i]=arr2.join(&quot;&quot;);//拼接arr2数组为arr的每一个元素 newStr=arr.join(&quot; &quot;);//拼接arr数组为最终的字符串 } console.log(newStr); return newStr; } titleCase(&quot;I&apos;m a litte tea pot&quot;); 解决过程没什么值得说的 略过 #####要点join() 方法操作的对象是数组 所以是 arr.join() 而不是 arr[i].join()]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FCC 题目 Caesars Cipher]]></title>
    <url>%2F2018%2F09%2F06%2FFCC%20%E7%AE%97%E6%B3%95%E9%A2%98%20Caesars%20Cipher%2F</url>
    <content type="text"><![CDATA[要求让上帝的归上帝，凯撒的归凯撒。 下面我们来介绍风靡全球的凯撒密码Caesar cipher，又叫移位密码。 移位密码也就是密码中的字母会按照指定的数量来做移位。 一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔ ‘O’，以此类推。 写一个ROT13函数，实现输入加密字符串，输出解密字符串。 所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。 当你完成不了挑战的时候，记得开大招’Read-Search-Ask’。 这是一些对你有帮助的资源: String.charCodeAt()String.fromCharCode() 代码12345678910111213141516171819202122function rot13(str) &#123; // LBH QVQ VG! var arr=str.split(&apos;&apos;); console.log(arr); for(var i=0;i&lt;arr.length;i++)&#123; var num1=arr[i].charCodeAt(0);//输入的加密字符编码 var num2=num1-13; //输入的加密字符编码解密后-13用来解密 if(num1&gt;=65&amp;&amp;num1&lt;=90)&#123; //判断字符是不是字母 if(num2&lt;65)&#123; //num1-13超出字母的编码表 arr[i]=String.fromCharCode(num1+13);// 90-(13-(num1-64)) &#125; else&#123; arr[i]=String.fromCharCode(num2); &#125; &#125; else&#123; arr[i]=arr[i]; &#125; str=arr.join(&quot;&quot;); &#125; return str; &#125; 要点ACCII编码表 里面的字母编码]]></content>
      <categories>
        <category>freeCodeCamp</category>
      </categories>
      <tags>
        <tag>fcc</tag>
        <tag>算法</tag>
        <tag>freeCodeCamp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自己实现一个eventBus]]></title>
    <url>%2F2018%2F09%2F06%2FeventBus%2F</url>
    <content type="text"><![CDATA[什么是发布/订阅模式？一张图来解释: 发布者发布一项内容给控制中心 控制中心将内容发送给对应的订阅者 当我们需要在完全没有联系的组件之间通信，经常会用到，下面开始code。 开始code一个最简单的首先我们先创建一个类 EventBus123class EventBus &#123;&#125; 类创建好了 我们需要思考一下我们这个类需要哪些方法和属性。首先我们肯定需要一个发布方法 一个订阅方法。其次我们还需要一个存储中心来存储事件以及对应的订阅函数，下面使我们目前想到的方法和属性。 发布方法 fire 订阅方法 on 存储中心 events ok 我们的eventBus类现在长成了这样12345678910111213class EventBus &#123; constructor() &#123; this.events = &#123;&#125; &#125; on = (eventName, callback) =&gt; &#123; this.events[eventName] = callback; // 以事件名为key 订阅函数为value存储在events里 &#125; fire = (eventName) =&gt; &#123; this.events[eventName]() // 调用事件对应的订阅函数 &#125;&#125; 现在完成了一个最简单的eventBus, 我们来测试一下 看看效果123456const eventBust = new EventBus()eventBus.on(&apos;greet&apos;); // 订阅事件 greetsetTimeout(() =&gt; &#123; eventBus.fire(&apos;greet&apos;) // 3s 后触发 greet 事件&#125;, 3000); 给事件的订阅函数传递参数ok 这个简单的eventBus可以正常运行了，下面我们要是想在触发事件的同时传一些参数进去呢？我们将fire改造一下就可以啦 用上扩展运算法 ‘…’ 想传几个参数就传几个参数。123fire(eventName, ...arg) &#123; this.events[eventName].call(this, ...arg) // 使用... 扩展运算符将所有参数传入订阅函数 &#125; 测试一下123456789const eventBus = new EventBus()eventBus.on(&apos;greet&apos;, (name1, name2) =&gt; &#123; console.log(`hello $&#123;name1&#125; and $&#123;name2&#125; ！`);&#125;); // 订阅事件 greetsetTimeout(() =&gt; &#123; eventBus.fire(&apos;greet&apos;, &apos;小明&apos;, &apos;小红&apos;) // 3s 后触发 greet 事件 并传入两个参数&#125;, 3000); 取消事件的所有订阅程序如果我们想要取消对某个事件的订阅呢？回顾一下 我们现在的eventBus具有的方法和属性，同时添加一个取消的方法。这是现在eventBus的样子 发布方法 fire 订阅方法 on 存储中心 events 取消订阅某一事件的所有方法 offAll 改造一下fire并添加一个offAll方法12345678fire(eventName, ...arg) &#123; if(typeof this.events[eventName] === &apos;function&apos;) &#123; this.events[eventName].call(this, ...arg); &#125; &#125;offAll(eventName) &#123; Reflect.deleteProperty(this.events, eventName); // 删除对某一事件的订阅 &#125; 测试一下1234567891011const eventBus = new EventBus()eventBus.on(&apos;greet&apos;, (name1, name2) =&gt; &#123; console.log(`hello $&#123;name1&#125; and $&#123;name2&#125; ！`);&#125;); // 订阅事件 greeteventBus.offAll(&apos;greet&apos;); // 取消订阅setTimeout(() =&gt; &#123; eventBus.fire(&apos;greet&apos;, &apos;小明&apos;, &apos;小红&apos;) // 3s 后触发 greet 事件 console.log(&apos;若上面没有log出内容 说明取消订阅成功&apos;);&#125;, 3000); 取消事件特定的订阅程序上面的offAll 是取消了对某一事件订阅所有订阅函数 加入我们只想取消某一个订阅程序呢？加一个off方法， 同事改造一下on和fire方法 12345678910111213141516171819202122on(eventName, callback) &#123; // 可能同一个事件注册了不同的订阅函数 if(this.events[eventName]) &#123; this.events[eventName].push(callback); &#125;else &#123; this.events[eventName] = [callback]; &#125; &#125;fire(eventName, ...arg) &#123; if(Reflect.has(this.events, eventName)) &#123; this.events[eventName].forEach(fn =&gt; &#123; fn.call(this, ...arg); &#125;); &#125;&#125;off(eventName, fnName) &#123; // 根据订阅程序的函数名称移除 const fns = this.events[eventName]; const targetIndex = fns.findIndex(fn =&gt; (fn.name === fnName)); fns.splice(targetIndex, 1); // 删除指定订阅函数&#125; 测试一下12345678910111213const eventBus = new EventBus()const fn1 = () =&gt; &#123; console.log(&apos;hello fn1 !!&apos;);&#125;const fn2 = () =&gt; &#123; console.log(&apos;hello fn2 !!&apos;);&#125;eventBus.on(&apos;greet&apos;,fn1); // 订阅事件 greeteventBus.on(&apos;greet&apos;,fn2); // 订阅事件 greeteventBus.off(&apos;greet&apos;, &apos;fn1&apos;); // 取消对greet事件的订阅函数 fn1setTimeout(() =&gt; &#123; eventBus.fire(&apos;greet&apos;) // 3s 后触发 greet 事件&#125;, 3000); 从上图可看到 只执行了fn2 没有执行fn1 说明取消订阅fn1的函数 成功！ 添加类型校验这个eventBus基本完成了我们还要在优化一下 添加一些类型校验，使代码更加健壮最终完成的代码如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273/** * events: &#123;&#125; * events.key @type string 事件名称 * events.value @type array 事件注册时的回调函数组成的数组 */class EventBus &#123; constructor() &#123; this.events = &#123;&#125; &#125; /** * 注册对事件的订阅 * @param &#123;*&#125; eventName 事件名称 * @param &#123;*&#125; callback 订阅程序 * @memberof EventBus */ on(eventName, callback) &#123; if(typeof eventName !== &apos;string&apos;) &#123; throw new Error(&apos;eventName expected string&apos;); &#125; if(typeof callback !==&apos;function&apos;) &#123; throw new Error(&apos;callback expected function&apos;); &#125; // 可能同一个事件注册了不同的回调函数 if(this.events[eventName]) &#123; this.events[eventName].push(callback); &#125;else &#123; this.events[eventName] = [callback]; // 此事件还未注册回调 &#125; &#125; /** *触发事件 * * @param &#123;*&#125; eventName 事件名称 * @param &#123;*&#125; arg 传给订阅程序的参数 * @memberof EventBus */ fire(eventName, ...arg) &#123; if(typeof eventName !== &apos;string&apos;) &#123; throw new Error(&apos;eventName expected string&apos;); &#125; if(Reflect.has(this.events, eventName)) &#123; this.events[eventName].forEach(fn =&gt; &#123; fn.call(this, ...arg); &#125;); &#125; &#125; /** * 取消订阅指定函数的事件 * * @param &#123;*&#125; eventName 事件名称 * @param &#123;*&#125; fnName 订阅程序的名称 * @memberof EventBus */ off(eventName, fnName) &#123; const fns = this.events[eventName]; const targetIndex = fns.findIndex(fn =&gt; (fn.name === fnName)); fns.splice(targetIndex, 1); // 删除指定回调 &#125; /** *取消所有指定事件的订阅 * * @param &#123;*&#125; eventName 事件名称 * @memberof EventBus */ offAll(eventName) &#123; Reflect.deleteProperty(this.events, eventName) &#125;&#125;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>eventBus 发布/订阅模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React-Router v4.0 笔记]]></title>
    <url>%2F2018%2F09%2F06%2Freact-router%20v4%2F</url>
    <content type="text"><![CDATA[最近用了几次react-router感觉对其使用还不够熟练，所以看着官方文档复习了一下，顺便做个笔记。因为webpack懒得搭环境了 所以直接上parcel 0 配置 很好用 但是正式开发我还是喜欢webpack 因为足够灵活 先上demo的 github链接 这是官方文档链接 匹配原理Route 组件匹配采用从上到下依次匹配，直到最后一个路由或者无可匹配的路由为止。若想只匹配一个路由，请使用Switch组件 基本使用选择Router：react-router 提供了五种router供选择，但前端常用到的就三种，具体区别 见文档， 这次选择 BrowserRouterRouter 需要传递historyBrowserRouter (官方推荐) 使用时需要服务器配合配置，若使用webpack开发需打开historyApiFallback选项HashRouter url中有一个#号 开始配置初始配置现在有三个页面 home , book 和 book的子页面kongfu，如下1234567&lt;li&gt;&lt;Link to=&apos;/&apos;&gt;home&lt;/Link&gt;&lt;/li&gt;&lt;li&gt;&lt;Link to=&apos;/movie&apos;&gt;movie&lt;/Link&gt;&lt;/li&gt;&lt;li&gt;&lt;Link to=&apos;/movie/kongfu&apos;&gt;kongfu&lt;/Link&gt;&lt;/li&gt; &lt;Route path=&apos;/&apos; component=&#123;Home&#125; /&gt;&lt;Route path=&apos;/movie&apos; component=&#123;Movie&#125; /&gt;&lt;Route path=&apos;/movie/kongfu&apos; component=&#123;KongFu&#125; /&gt; 每一个被匹配到的路由均渲染了对应的组件，效果图如下：若我们想只匹配一个组件怎么办？往下看。 使用Switch组件修改上面的路由部分代码，添加Switch组件12345&lt;Switch&gt; &lt;Route path=&apos;/&apos; component=&#123;Home&#125; /&gt; &lt;Route path=&apos;/movie&apos; component=&#123;Movie&#125; /&gt; &lt;Route path=&apos;/movie/kongfu&apos; component=&#123;KongFu&#125; /&gt;&lt;/Switch&gt; 无论跳转到任何一个路由都只会匹配第一个路由home。效果图如下： 但是我们并不想要这样的结果，有两个办法可以解决 把最精确的路由放在最前面 Route组件添加exact属性 如下12345678910111213// 第一种方法&lt;Switch&gt; &lt;Route path=&apos;/movie/kongfu&apos; component=&#123;KongFu&#125; /&gt; &lt;Route path=&apos;/movie&apos; component=&#123;Movie&#125; /&gt; &lt;Route path=&apos;/&apos; component=&#123;Home&#125; /&gt;&lt;/Switch&gt;// 第二种方法&lt;Switch&gt; &lt;Route exact path=&apos;/&apos; component=&#123;Home&#125; /&gt; &lt;Route exact path=&apos;/movie&apos; component=&#123;Movie&#125; /&gt; &lt;Route exact path=&apos;/movie/kongfu&apos; component=&#123;KongFu&#125; /&gt;&lt;/Switch&gt; 效果图如下： 布局单个布局我们日常使用过程中经常会有导航栏或者侧边栏的需求，如下。header作为导航栏部分, main作为匹配路由的部分1234567891011&lt;header style=&#123;&#123;backgroundColor:&apos;#b8cca6&apos;&#125;&#125;&gt; &lt;h1&gt;This is header&lt;/h1&gt;&lt;/header&gt;&lt;main style=&#123;&#123;backgroundColor:&apos;#26899e&apos;&#125;&#125;&gt; &lt;Switch&gt; &lt;Route exact path=&apos;/&apos; component=&#123;Home&#125; /&gt; &lt;Route exact path=&apos;/movie&apos; component=&#123;Movie&#125; /&gt; &lt;Route exact path=&apos;/book&apos; component=&#123;Book&#125; /&gt; &lt;/Switch&gt;&lt;/main&gt; 为了效果，明显对header以及main部分加了背景色，如下图： 如果我们有多个布局怎么办? 比如常见的还有登录布局，往下看。 多个布局为实现多个布局我们将多个布局提取成多个组件123456789101112131415161718192021222324/***** BasicLayout.jsx *****/&lt;div&gt; &lt;h1&gt;BasicLayout!!&lt;/h1&gt; &lt;Route exact path=&apos;/&apos; component=&#123;Home&#125; /&gt; &lt;Route exact path=&apos;/movie&apos; component=&#123;Movie&#125; /&gt; &lt;Route exact path=&apos;/book&apos; component=&#123;Book&#125; /&gt;&lt;/div&gt; /***** LoginLayout.jsx *****/&lt;div&gt; &lt;h1&gt;LoginLayout!!&lt;/h1&gt; &lt;form action=&quot;&quot;&gt; username： &lt;input type=&quot;text&quot; placeholder=&apos;please input username&apos;/&gt; &lt;br /&gt; password： &lt;input type=&quot;password&quot; placeholder=&apos;please input password&apos;/&gt; &lt;/form&gt;&lt;/div&gt;/***** App.jsx *****/// 注意 有子路由的Route不要加exact不然会匹配不到子路由，&lt;Switch&gt; &lt;Route path=&apos;/login&apos; component=&#123;LoginLayout&#125; /&gt; &lt;Route path=&apos;/&apos; component=&#123;BasicLayout&#125; /&gt;&lt;/Switch&gt; 如下图： 登录验证既然有登录布局 自然就需要有登录验证 官方推荐的做法是自己实现一个AuthRoute，如下12345678910111213141516171819202122const AuthRoute = (props) =&gt; &#123; const &#123; component:Component, ...rest &#125; = props; // parcel 默认不支持rest参数， 需添加babel-plugin-transform-object-rest-spread 并添加到.babelrc文件中 // const rest = &#123;&#125;; // for (const _key in props) &#123; // if(_key !== &apos;component&apos;) &#123; // rest[_key] = props[_key] // &#125; // &#125; return (&lt;Route &#123;...rest&#125; render=&#123;(props) =&gt; ( islogin()? (&lt;Component &#123;...props&#125; /&gt;) : (&lt;Redirect to=&apos;/login&apos; /&gt;) )&#125; /&gt;)&#125; 此处有两个小坑， parcel默认不支持rest参数，具体看上面代码注释。 Route组件的 component 和 render 都会在路径匹配时渲染组件，但component优先级较高，若两个属性同时出现render会被忽略。 下面看下效果：首先是未登录状态 任何路由都无法进入 只能停留在login页 下面是登陆后的效果，任何路由都可以访问，登出后之能访问login页 编程式导航既然有了登录验证 那我们总不能让用户自己点其他路由跳转到首页吧！ 下面就来使用withRouter 在登陆成功后让代码手动跳转到首页 12const &#123; history &#125; = this.props history.push(&apos;/&apos;); 被Route包裹的组件都会在props拥有history,match,location对象，使用hisory对象的push方法即可进行手动跳转。效果如下图： withRouter若在Route组件之外想要访问 history，match，location对象并做一些操作呢？这时候withRouter就排上用场了，每次路由发生变化时Router包裹的组件会被重新渲染,withRouter包裹的组件就可访问到路由信息对象，就可以响应路由变化 我们改造一下导航部分 将其封装成一个Nav组件, 在export时用withRouter包裹。123456789101112131415161718192021import &#123; withRouter, Link &#125; from &apos;react-router-dom&apos;;class Nav extends Component &#123; render() &#123; const activeStyle = &#123; backgroundColor: &apos;#00a74a&apos; &#125; const path = this.props.location.pathname; console.log(&apos;test&apos;, this.props) return ( &lt;ul&gt; &lt;li&gt;&lt;Link to=&apos;/login&apos; style=&#123;path === &apos;/login&apos;?activeStyle:&#123;&#125;&#125; &gt;login&lt;/Link &gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=&apos;/&apos; style=&#123;path === &apos;/&apos;?activeStyle:&#123;&#125;&#125; &gt;home&lt;/Link &gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=&apos;/movie&apos; style=&#123;path === &apos;/movie&apos;?activeStyle:&#123;&#125;&#125;&gt;movie&lt;/Link &gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=&apos;/book&apos; style=&#123;path === &apos;/book&apos;?activeStyle:&#123;&#125;&#125;&gt;book&lt;/Link &gt;&lt;/li&gt; &lt;/ul&gt; ) &#125;&#125;export default withRouter(Nav); 效果如下图： 以上就是一些react-router v4的一些基本使用。若有错误欢迎指出！ Tips: 注意看文中的Route 和Router 就差一个字母 不要看花了眼哦]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react react-router</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack-react-ts 搭建开发环境（一）]]></title>
    <url>%2F2018%2F09%2F04%2Fwebpack-react-ts%2F</url>
    <content type="text"><![CDATA[最近一直再用脚手架搭建开发环境，突然发现自己过度依赖脚手架，这可不是好现象。于是便有了自己搞一套webpack-react-ts开发环境的想法。 下面就开始动手吧。 Step1: 创建项目目录及初始化12$ mkdir webpack-react-typescript$ npm init // 填写项目信息 身为懒人的我自然是一路回车 创建代码目录以及webapck配置文件，下面是我目前创建好的目录结构 123456├── index.html├── package.json├── src│ ├── App.tsx│ └── index.ts└── webpack.config.js 然后安装依赖， webpack用来打包，devServer 是一个简单的本地服务器 webpack-html-plugin用于生成html1$ npm i webpack webpack-dev-server html-webpack-plugin webpack-cli --save-dev Step2: 配置webpack下面开始配置webpack , 最基本的配置 入口文件以及出口文件12345678910111213141516171819const path = require(&apos;path&apos;); // 引入path工具module.exports = &#123; mode:&apos;development&apos;, //webpack4开始 需要指定mode属性 entry: path.resolve(__dirname, &apos;index.ts&apos;), output: &#123; filename: &apos;[name][hash:6].js&apos;, // hash：后面的数字指定hash值位数 path: path.resolve(__dirname, &apos;dist&apos;), // 指定输出目录 &#125;, resolve:&#123; extensions: [&apos;.ts&apos;,&apos;.tsx&apos;,&apos;.js&apos;] // 此选项可在import模块时省略扩展名 &#125;, plugins:[ new webpackHtmlPlugin(&#123; template: path.resolve(__dirname, &apos;index/html&apos;) // 指定模板html文件 &#125;), ]&#125; 如果我们用的是JS 的话按照目前的配置应该已经可以开始跑起来了 但是我们可是严肃的TS！！ 所以我们还需要配置TS必不可少的三样东西 tsconfig.json tslint.json ts-loader 下面我们首先安装依赖 （tslint 选装，但强烈推荐）1$ npm install --save-dev typescript awesome-typescript-loader tslint 然后创建配置文件1$ touch tsconfig.json tslint.json // touch是shell命令，不熟悉可以手动创建两个文件 tsconfig.json 配置： 下面是一些基本的配置noImplicitAny选项 建议打开 作用是在ts文件中不能有隐式any类型，其他配置项见 TypeScript官网1234567891011121314151617&#123; &quot;compilerOptions&quot;: &#123; &quot;outDir&quot;: &quot;./dist/&quot;, &quot;noImplicitAny&quot;: true, &quot;sourceMap&quot;: true, &quot;module&quot;: &quot;esnext&quot;, &quot;target&quot;: &quot;es5&quot;, &quot;jsx&quot;: &quot;react&quot;, &quot;moduleResolution&quot;: &quot;node&quot; &#125;, &quot;include&quot;: [ &quot;src/**/*&quot; ], &quot;exclude&quot;: [ &quot;node_modules&quot; ]&#125; tslint.json 配置： rules 是 规则配置 这些是我惯用的一些配置 其他配置可移步 TSLint官网 1234567891011121314151617181920212223242526&#123; &quot;extends&quot;: &quot;tslint:recommended&quot;, &quot;linterOptions&quot;:&#123; &quot;exclude&quot;:[ &quot;dist/*&quot; ] &#125;, &quot;rules&quot;:&#123; &quot;quotemark&quot;: &#123; &quot;options&quot;: [&quot;single&quot;,&quot;jsx-single&quot;], &quot;severity&quot;: &quot;error&quot; &#125;, &quot;space-before-function-paren&quot;: true, &quot;no-magic-numbers&quot;:true, &quot;no-empty&quot;:true, &quot;no-unused-expression&quot;: true, &quot;import-spacing&quot;: true, &quot;ordered-imports&quot;:false, &quot;semicolon&quot;:true, &quot;object-literal-sort-keys&quot;:false, &quot;no-console&quot;:false, &quot;member-ordering&quot;:false, &quot;forin&quot;:false, &quot;no-unused-variable&quot;:true &#125;&#125; tips: 注意json文件的格式一定要对 不然无法生效 比如对象与数组的最后一项后不能有逗号（可把我坑苦了） 配置ts-loader 或 awesome-typescript-loader 二者选其一即可。12345678module: &#123; rules: [ &#123; test: /\.tsx?$/, loader: &apos;awesome-typescript-loader&apos; &#125; ] &#125; 现在基本的配置都齐全了，若全局安装过webpack-dev-server 和 webpack的话可直接在shell中输入 12$ webpack-dev-server // 启动静态服务器$ webpack // 打包 这可不够优雅！所以我们在package.json中添加script字段 12345&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;webpack-dev-server&quot;, &quot;build&quot;: &quot;webpack&quot;, &quot;tslint&quot;: &quot;tslint --fix -p ./&quot; &#125; tslint 可配合VScode的tslint插件 在写代码的过程中即可检查lint错误非常好用，极力推荐，项目中的tslint.json 文件会覆盖vscode插件的配置下面就是见证奇迹的时刻， 在shell中输入命令 1$ npm run start 我们的服务器就起来了。打开浏览器输入 webpack-dev-server提示的地址即可看到我们的程序已经可以跑起来了。下面是截止到目前的目录结构 12345678├── index.html├── package.json├── src│ ├── App.tsx│ └── index.tsx├── tsconfig.json├── tslint.json└── webpack.config.js 但是还缺点啥？ 缺CSS啊！没有CSS叫什么前端！！这就加上！ 我们在App.tsx中引入CSS文件 1import &apos;./app.css&apos;; 这就够了吗？ 当然不够 webpack还不认是你的css文件呢 我们得加上css-loader 1$ npm install --save-dev style-loader css-loader 然后修改我们的webpack配置文件的rule规则,test匹配CSS文件 use选择使用对应的loader取处理对应的文件 1234&#123; test: /\.css$/, use:[&apos;style-loader&apos;,&apos;css-loader&apos;]&#125; 现在我们的项目已经基本上有的功能都有了 接下来就是优化了。 具体看我下一篇博客(暂未更新)]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>typescript</tag>
        <tag>react</tag>
      </tags>
  </entry>
</search>
